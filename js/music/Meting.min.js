"use strict";
console.log("\n %c MetingJS v1.2.0 %c  \n", "color: #fadfa3; background: #030307; padding:5px 0;", "background: #fadfa3; padding:5px 0;");
// 定义一个数组，用于存储 APlayer 实例
var aplayers = [],
// 定义一个函数，用于加载和初始化 MetingJS
loadMeting = function() {
    // 内部函数，用于创建和初始化 APlayer 实例
    function a(a, t) {
        // 配置对象，包含播放器的各种配置选项
        var e = {
            container: a,         // 播放器的容器元素
            audio: t,             // 音频数据
            mini: null,           // 是否为迷你模式
            fixed: null,          // 是否为固定模式
            autoplay: !1,         // 是否自动播放
            mutex: !0,            // 是否互斥
            lrcType: 3,           // 歌词类型
            listFolded: !1,       // 播放列表是否折叠
            preload: "auto",      // 预加载模式
            theme: "#2980b9",     // 播放器主题颜色
            loop: "all",          // 循环模式
            order: "list",        // 播放顺序
            volume: null,         // 音量
            listMaxHeight: null,  // 播放列表最大高度
            customAudioType: null,// 自定义音频类型
            storageName: "metingjs" // 本地存储名
        };
        // 如果音频数据存在
        if (t.length) {
            t[0].lrc || (e.lrcType = 0);
            // 如果没有歌词，则设置歌词类型为 0
            var r = {}; // 临时对象，用于存储播放器配置

            // 遍历配置对象
            for (var s in e) {
                var n = s.toLowerCase(); // 将属性名转换为小写
                // 检查 dataset 中是否存在属性，并将其赋值给配置对象
                (a.dataset.hasOwnProperty(n) || a.dataset.hasOwnProperty(s) || null !== e[s]) && (r[s] = a.dataset[n] || a.dataset[s] || e[s], "true" !== r[s] && "false" !== r[s] || (r[s] = "true" == r[s]));
            }
            // 创建一个新的 APlayer 实例，并添加到数组中
            aplayers.push(new APlayer(r));
        }
    }
    // 定义 API 的默认地址
    var t = "https://api.i-meto.com/meting/api?server=:server&type=:type&id=:id&r=:r";
    // 如果全局变量 meting_api 存在，则使用它覆盖默认地址
    "undefined" != typeof meting_api && (t = meting_api);
    // 遍历所有已存在的 APlayer 实例，进行销毁操作
    for (var e = 0; e < aplayers.length; e++)
        if (!aplayers[e].container.classList.contains("no-destroy"))
            try { aplayers[e].destroy(); } catch (a) { console.log(a); }
    // 清空 APlayer 实例数组
    aplayers = [];
    // 查找页面上所有具有类名 .aplayer 的元素
    for (var r = document.querySelectorAll(".aplayer"), s = 0; s < r.length; s++) {
        // 自调用函数，用于处理每个 .aplayer 元素
        (function() {
            var e = r[s]; // 当前元素
            // 如果元素具有 no-reload 类，则跳过该元素
            if (e.classList.contains("no-reload")) return "continue";

            // 如果元素具有 no-destroy 类，则添加 no-reload 类
            if (e.classList.contains("no-destroy") && e.classList.add("no-reload"), e.dataset.id) {
                // 根据元素的 dataset 属性生成请求 URL
                var n = e.dataset.api || t;
                n = n.replace(":server", e.dataset.server), n = n.replace(":type", e.dataset.type), n = n.replace(":id", e.dataset.id), n = n.replace(":auth", e.dataset.auth), n = n.replace(":r", Math.random());

                // 创建一个新的 XMLHttpRequest 对象
                var o = new XMLHttpRequest;
                o.onreadystatechange = function() {
                    // 检查请求状态，如果成功则解析响应数据
                    if (4 === o.readyState && (o.status >= 200 && o.status < 300 || 304 === o.status)) {
                        var t = JSON.parse(o.responseText);
                        // 使用解析后的数据初始化播放器
                        a(e, t);
                    }
                };

                // 发送 GET 请求
                o.open("get", n, !0), o.send(null);
            } else if (e.dataset.url) {
                // 如果元素具有 URL 数据，则创建一个音频对象
                var l = [{
                    name: e.dataset.name || e.dataset.title || "Audio name",
                    artist: e.dataset.artist || e.dataset.author || "Audio artist",
                    url: e.dataset.url,
                    cover: e.dataset.cover || e.dataset.pic,
                    lrc: e.dataset.lrc,
                    type: e.dataset.type || "auto"
                }];

                // 使用音频对象初始化播放器
                a(e, l);
            }
        })();
    }
};

// 监听 DOMContentLoaded 事件，在文档加载完成后执行 loadMeting 函数
document.addEventListener("DOMContentLoaded", loadMeting, !1);